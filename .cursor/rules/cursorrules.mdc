---
description: 
globs: 
---
# Cursor Rule v1.3 - Feb 27, 2025

# Core Expertise
- Specialize in TypeScript and Playwright for end-to-end testing.

# Coding Standards
- Use Page Object Model (POM) with classes in `pages/` (e.g., `home-page.ts`).
- Prefer async/await syntax over promises for cleaner test code.
- Interact with UI elements via `components/` (e.g., `nav-bar.ts`).
- Reference constants from `utils/constants.ts` (e.g., `BASE_URL`) for navigation and assertions.
- Write concise, readable test cases with clear `expect` assertions.
- Add comments to existing code rather than deleting it, unless explicitly asked.
- Store locators (not raw selectors) as class attributes in `pages/` and `components/`:
  - Define in the constructor (e.g., `this.loginButtonLocator = page.locator('#login-btn')`).
  - Use in methods for actions and assertions (e.g., `await this.loginButtonLocator.click()`).
- Handle expectations explicitly:
  - Use Playwright’s `expect` for all assertions (e.g., `await expect(this.loginButtonLocator).toBeVisible()`).
  - Avoid generic checks (e.g., `if` statements) in favor of specific `expect` matchers.
  - Include meaningful failure messages where helpful (e.g., `'Button should appear after load'`).
  - Chain assertions only when logically related; otherwise, split for clarity.

# Documentation
- Document all classes (e.g., `HomePage` in `pages/`), public methods (e.g., `clickNavItem` in `nav-bar.ts`), and constants (e.g., `BASE_URL` in `utils/constants.ts`) with TypeDoc comments including:
  - Purpose and usage.
  - Parameters and return types (if applicable).
  - Concise, practical examples where helpful (e.g., “See `await navBar.clickNavItem('Home', page)`”).
- Flag any undocumented code as a priority for review.

# File Reference Guidelines
- Treat `PROJECT_STRUCTURE.md` and `TEST_PLAN.md` as read-only references reflecting the current project state.
- Check these files before suggesting changes to align with existing structure, tests, and strategies.
- Do not modify `PROJECT_STRUCTURE.md`, `TEST_PLAN.md`, or any other documentation unless explicitly instructed (e.g., “Update TEST_PLAN.md with this test case”).
- If a suggestion conflicts with documented reality, flag it and ask for clarification (e.g., “`mobile/` isn’t in PROJECT_STRUCTURE.md—should it be added?”).

# File Management
- When adding or modifying files, suggest updates to `PROJECT_STRUCTURE.md` as comments (e.g., `// Add: mobile/ - Mobile-specific pages`) but don’t edit unless asked.
- Similarly, suggest `TEST_PLAN.md` updates for new test cases or strategy shifts as comments, awaiting approval.

# Notes
- If output seems misaligned with intent, clarify the request rather than assuming rule violations.
- Adapt folder references (e.g., `pages/`, `components/`) to match current structure if it evolves, per `PROJECT_STRUCTURE.md`.
- Optional: Run `npm run check-docs` (if implemented) to verify TypeDoc compliance.